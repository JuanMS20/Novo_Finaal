{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\nimport { db } from '../main.js';\nexport default {\n  __name: 'FeedPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const title = ref(\"\");\n    const description = ref(\"\");\n    const posts = ref([]);\n    const editingPost = ref(null); // Para saber si se está editando un post\n\n    // Función para enviar los datos\n    const submitData = async () => {\n      try {\n        if (editingPost.value) {\n          // Actualizar el post si se está editando\n          const postRef = doc(db, \"posts\", editingPost.value.id);\n          await updateDoc(postRef, {\n            title: title.value,\n            description: description.value\n          });\n          alert(\"Post actualizado correctamente\");\n        } else {\n          // Añadir nuevo post\n          await addDoc(collection(db, \"posts\"), {\n            title: title.value,\n            description: description.value,\n            createdAt: new Date()\n          });\n          alert(\"Datos enviados correctamente\");\n        }\n        title.value = \"\"; // Limpiar campos después de enviar\n        description.value = \"\";\n        editingPost.value = null; // Reiniciar la variable de edición\n        fetchPosts(); // Recargar los posts\n      } catch (e) {\n        console.error(\"Error al añadir o actualizar el documento: \", e);\n        alert(\"Hubo un error al enviar los datos\");\n      }\n    };\n\n    // Función para obtener los posts desde Firestore\n    const fetchPosts = async () => {\n      const querySnapshot = await getDocs(collection(db, \"posts\"));\n      posts.value = querySnapshot.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n    };\n\n    // Función para editar un post\n    const editPost = post => {\n      title.value = post.title;\n      description.value = post.description;\n      editingPost.value = post;\n    };\n\n    // Función para eliminar un post\n    const deletePost = async id => {\n      const postRef = doc(db, \"posts\", id);\n      await deleteDoc(postRef);\n      alert(\"Post eliminado correctamente\");\n      fetchPosts(); // Recargar los posts\n    };\n\n    // Cargar los posts cuando el componente se monte\n    onMounted(() => {\n      fetchPosts();\n    });\n    const __returned__ = {\n      title,\n      description,\n      posts,\n      editingPost,\n      submitData,\n      fetchPosts,\n      editPost,\n      deletePost,\n      ref,\n      onMounted,\n      get collection() {\n        return collection;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get getDocs() {\n        return getDocs;\n      },\n      get doc() {\n        return doc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get deleteDoc() {\n        return deleteDoc;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","collection","addDoc","getDocs","doc","updateDoc","deleteDoc","db","title","description","posts","editingPost","submitData","value","postRef","id","alert","createdAt","Date","fetchPosts","e","console","error","querySnapshot","docs","map","data","editPost","post","deletePost"],"sources":["C:/Users/jorda/authfire/src/views/FeedPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Formulario Feed</h1>\r\n      <form @submit.prevent=\"submitData\">\r\n        <input v-model=\"title\" type=\"text\" placeholder=\"Título\" />\r\n        <input v-model=\"description\" type=\"text\" placeholder=\"Descripción\" />\r\n        <button type=\"submit\">Enviar</button>\r\n      </form>\r\n  \r\n      <!-- Mostrar lista de posts -->\r\n      <div v-if=\"posts.length > 0\">\r\n        <h2>Posts</h2>\r\n        <ul>\r\n          <li v-for=\"post in posts\" :key=\"post.id\">\r\n            <h3>{{ post.title }}</h3>\r\n            <p>{{ post.description }}</p>\r\n            <button @click=\"editPost(post)\">Editar</button>\r\n            <button @click=\"deletePost(post.id)\">Eliminar</button>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted } from 'vue';\r\n  import { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\r\n  import { db } from '../main.js';\r\n  \r\n  const title = ref(\"\");\r\n  const description = ref(\"\");\r\n  const posts = ref([]);\r\n  const editingPost = ref(null);  // Para saber si se está editando un post\r\n  \r\n  // Función para enviar los datos\r\n  const submitData = async () => {\r\n    try {\r\n      if (editingPost.value) {\r\n        // Actualizar el post si se está editando\r\n        const postRef = doc(db, \"posts\", editingPost.value.id);\r\n        await updateDoc(postRef, {\r\n          title: title.value,\r\n          description: description.value\r\n        });\r\n        alert(\"Post actualizado correctamente\");\r\n      } else {\r\n        // Añadir nuevo post\r\n        await addDoc(collection(db, \"posts\"), {\r\n          title: title.value,\r\n          description: description.value,\r\n          createdAt: new Date()\r\n        });\r\n        alert(\"Datos enviados correctamente\");\r\n      }\r\n  \r\n      title.value = \"\";  // Limpiar campos después de enviar\r\n      description.value = \"\";\r\n      editingPost.value = null;  // Reiniciar la variable de edición\r\n      fetchPosts();  // Recargar los posts\r\n    } catch (e) {\r\n      console.error(\"Error al añadir o actualizar el documento: \", e);\r\n      alert(\"Hubo un error al enviar los datos\");\r\n    }\r\n  };\r\n  \r\n  // Función para obtener los posts desde Firestore\r\n  const fetchPosts = async () => {\r\n    const querySnapshot = await getDocs(collection(db, \"posts\"));\r\n    posts.value = querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));\r\n  };\r\n  \r\n  // Función para editar un post\r\n  const editPost = (post) => {\r\n    title.value = post.title;\r\n    description.value = post.description;\r\n    editingPost.value = post;\r\n  };\r\n  \r\n  // Función para eliminar un post\r\n  const deletePost = async (id) => {\r\n    const postRef = doc(db, \"posts\", id);\r\n    await deleteDoc(postRef);\r\n    alert(\"Post eliminado correctamente\");\r\n    fetchPosts();  // Recargar los posts\r\n  };\r\n  \r\n  // Cargar los posts cuando el componente se monte\r\n  onMounted(() => {\r\n    fetchPosts();\r\n  });\r\n  </script>\r\n  "],"mappings":"AAyBE,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,SAASC,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAEC,GAAG,EAAEC,SAAS,EAAEC,SAAS,QAAQ,oBAAoB;AAC3F,SAASC,EAAE,QAAQ,YAAY;;;;;;;IAE/B,MAAMC,KAAK,GAAGT,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMU,WAAW,GAAGV,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAMW,KAAK,GAAGX,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMY,WAAW,GAAGZ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAE;;IAEhC;IACA,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,IAAID,WAAW,CAACE,KAAK,EAAE;UACrB;UACA,MAAMC,OAAO,GAAGV,GAAG,CAACG,EAAE,EAAE,OAAO,EAAEI,WAAW,CAACE,KAAK,CAACE,EAAE,CAAC;UACtD,MAAMV,SAAS,CAACS,OAAO,EAAE;YACvBN,KAAK,EAAEA,KAAK,CAACK,KAAK;YAClBJ,WAAW,EAAEA,WAAW,CAACI;UAC3B,CAAC,CAAC;UACFG,KAAK,CAAC,gCAAgC,CAAC;QACzC,CAAC,MAAM;UACL;UACA,MAAMd,MAAM,CAACD,UAAU,CAACM,EAAE,EAAE,OAAO,CAAC,EAAE;YACpCC,KAAK,EAAEA,KAAK,CAACK,KAAK;YAClBJ,WAAW,EAAEA,WAAW,CAACI,KAAK;YAC9BI,SAAS,EAAE,IAAIC,IAAI,CAAC;UACtB,CAAC,CAAC;UACFF,KAAK,CAAC,8BAA8B,CAAC;QACvC;QAEAR,KAAK,CAACK,KAAK,GAAG,EAAE,CAAC,CAAE;QACnBJ,WAAW,CAACI,KAAK,GAAG,EAAE;QACtBF,WAAW,CAACE,KAAK,GAAG,IAAI,CAAC,CAAE;QAC3BM,UAAU,CAAC,CAAC,CAAC,CAAE;MACjB,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,6CAA6C,EAAEF,CAAC,CAAC;QAC/DJ,KAAK,CAAC,mCAAmC,CAAC;MAC5C;IACF,CAAC;;IAED;IACA,MAAMG,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMI,aAAa,GAAG,MAAMpB,OAAO,CAACF,UAAU,CAACM,EAAE,EAAE,OAAO,CAAC,CAAC;MAC5DG,KAAK,CAACG,KAAK,GAAGU,aAAa,CAACC,IAAI,CAACC,GAAG,CAACrB,GAAG,KAAK;QAAE,GAAGA,GAAG,CAACsB,IAAI,CAAC,CAAC;QAAEX,EAAE,EAAEX,GAAG,CAACW;MAAG,CAAC,CAAC,CAAC;IAC9E,CAAC;;IAED;IACA,MAAMY,QAAQ,GAAIC,IAAI,IAAK;MACzBpB,KAAK,CAACK,KAAK,GAAGe,IAAI,CAACpB,KAAK;MACxBC,WAAW,CAACI,KAAK,GAAGe,IAAI,CAACnB,WAAW;MACpCE,WAAW,CAACE,KAAK,GAAGe,IAAI;IAC1B,CAAC;;IAED;IACA,MAAMC,UAAU,GAAG,MAAOd,EAAE,IAAK;MAC/B,MAAMD,OAAO,GAAGV,GAAG,CAACG,EAAE,EAAE,OAAO,EAAEQ,EAAE,CAAC;MACpC,MAAMT,SAAS,CAACQ,OAAO,CAAC;MACxBE,KAAK,CAAC,8BAA8B,CAAC;MACrCG,UAAU,CAAC,CAAC,CAAC,CAAE;IACjB,CAAC;;IAED;IACAnB,SAAS,CAAC,MAAM;MACdmB,UAAU,CAAC,CAAC;IACd,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}