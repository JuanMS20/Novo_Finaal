{"ast":null,"code":"const BASE_URL = 'http://localhost:8090/api';\nconst axiosInstance = {\n  async checkConnection() {\n    try {\n      console.log('Verificando conexión con el servidor...');\n      const response = await fetch(`${BASE_URL}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const isConnected = response.ok;\n      console.log('Conexión con el servidor:', isConnected ? 'OK' : 'Fallida');\n      return isConnected;\n    } catch (error) {\n      console.error('Error de conexión:', error);\n      return false;\n    }\n  },\n  async get(url, config = {}) {\n    await this.verifyConnection();\n    try {\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...(token && {\n          'Authorization': `Bearer ${token}`\n        }),\n        ...config.headers\n      };\n      const response = await fetch(`${BASE_URL}${url}`, {\n        method: 'GET',\n        headers,\n        credentials: 'include'\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      throw handleError(error);\n    }\n  },\n  async post(url, data, config = {}) {\n    await this.verifyConnection();\n    try {\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...(token && {\n          'Authorization': `Bearer ${token}`\n        }),\n        ...config.headers\n      };\n      const response = await fetch(`${BASE_URL}${url}`, {\n        method: 'POST',\n        headers,\n        credentials: 'include',\n        body: JSON.stringify(data)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      throw handleError(error);\n    }\n  },\n  async verifyConnection() {\n    const isConnected = await this.checkConnection();\n    if (!isConnected) {\n      throw new Error('No se puede establecer conexión con el servidor. Por favor, verifica que el servidor esté corriendo y vuelve a intentar.');\n    }\n  }\n};\nasync function handleResponse(response) {\n  let data;\n  try {\n    data = await response.json();\n  } catch (error) {\n    data = null;\n  }\n  if (!response.ok) {\n    if (response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    throw {\n      response: {\n        data,\n        status: response.status,\n        statusText: response.statusText\n      }\n    };\n  }\n  return data;\n}\nfunction handleError(error) {\n  console.error('Error en la petición:', error);\n  if (!navigator.onLine) {\n    return new Error('No hay conexión a internet');\n  }\n  if (error.name === 'AbortError') {\n    return new Error('La petición fue cancelada');\n  }\n  if (error instanceof TypeError) {\n    return new Error('Error de conexión con el servidor');\n  }\n  return error;\n}\nexport default axiosInstance;","map":{"version":3,"names":["BASE_URL","axiosInstance","checkConnection","console","log","response","fetch","method","headers","isConnected","ok","error","get","url","config","verifyConnection","token","localStorage","getItem","credentials","handleResponse","handleError","post","data","body","JSON","stringify","Error","json","status","removeItem","window","location","href","statusText","navigator","onLine","name","TypeError"],"sources":["C:/Users/maylo/OneDrive/Escritorio/novo-front 1/src/services/axios.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8090/api'\r\n\r\nconst axiosInstance = {\r\n  async checkConnection() {\r\n    try {\r\n      console.log('Verificando conexión con el servidor...')\r\n      const response = await fetch(`${BASE_URL}/health`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const isConnected = response.ok\r\n      console.log('Conexión con el servidor:', isConnected ? 'OK' : 'Fallida')\r\n      return isConnected\r\n    } catch (error) {\r\n      console.error('Error de conexión:', error)\r\n      return false\r\n    }\r\n  },\r\n\r\n  async get(url, config = {}) {\r\n    await this.verifyConnection()\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        ...config.headers\r\n      }\r\n\r\n      const response = await fetch(`${BASE_URL}${url}`, {\r\n        method: 'GET',\r\n        headers,\r\n        credentials: 'include'\r\n      })\r\n      return await handleResponse(response)\r\n    } catch (error) {\r\n      throw handleError(error)\r\n    }\r\n  },\r\n\r\n  async post(url, data, config = {}) {\r\n    await this.verifyConnection()\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        ...config.headers\r\n      }\r\n\r\n      const response = await fetch(`${BASE_URL}${url}`, {\r\n        method: 'POST',\r\n        headers,\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n      })\r\n      return await handleResponse(response)\r\n    } catch (error) {\r\n      throw handleError(error)\r\n    }\r\n  },\r\n\r\n  async verifyConnection() {\r\n    const isConnected = await this.checkConnection()\r\n    if (!isConnected) {\r\n      throw new Error('No se puede establecer conexión con el servidor. Por favor, verifica que el servidor esté corriendo y vuelve a intentar.')\r\n    }\r\n  }\r\n}\r\n\r\nasync function handleResponse(response) {\r\n  let data\r\n  try {\r\n    data = await response.json()\r\n  } catch (error) {\r\n    data = null\r\n  }\r\n    \r\n  if (!response.ok) {\r\n    if (response.status === 401) {\r\n      localStorage.removeItem('token')\r\n      window.location.href = '/login'\r\n    }\r\n    throw { \r\n      response: { \r\n        data, \r\n        status: response.status,\r\n        statusText: response.statusText \r\n      } \r\n    }\r\n  }\r\n    \r\n  return data\r\n}\r\n\r\nfunction handleError(error) {\r\n  console.error('Error en la petición:', error)\r\n  if (!navigator.onLine) {\r\n    return new Error('No hay conexión a internet')\r\n  }\r\n  if (error.name === 'AbortError') {\r\n    return new Error('La petición fue cancelada')\r\n  }\r\n  if (error instanceof TypeError) {\r\n    return new Error('Error de conexión con el servidor')\r\n  }\r\n  return error\r\n}\r\n\r\nexport default axiosInstance "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}