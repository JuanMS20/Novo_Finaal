{"ast":null,"code":"const axiosInstance = {\n  async get(url, config = {}) {\n    try {\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...(token && {\n          'Authorization': `Bearer ${token}`\n        }),\n        ...config.headers\n      };\n      const response = await fetch(`http://localhost:8090/api${url}`, {\n        method: 'GET',\n        headers,\n        credentials: 'include'\n      });\n      return handleResponse(response);\n    } catch (error) {\n      handleError(error);\n    }\n  },\n  async post(url, data, config = {}) {\n    try {\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...(token && {\n          'Authorization': `Bearer ${token}`\n        }),\n        ...config.headers\n      };\n      const response = await fetch(`http://localhost:8090/api${url}`, {\n        method: 'POST',\n        headers,\n        credentials: 'include',\n        body: JSON.stringify(data)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      handleError(error);\n    }\n  }\n};\nasync function handleResponse(response) {\n  try {\n    const data = await response.json();\n    if (!response.ok) {\n      if (response.status === 401) {\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n      }\n      throw {\n        response: {\n          data,\n          status: response.status,\n          statusText: response.statusText\n        }\n      };\n    }\n    return {\n      data\n    };\n  } catch (error) {\n    handleError(error);\n  }\n}\nfunction handleError(error) {\n  console.error('Error en la petición:', error);\n  if (!navigator.onLine) {\n    throw new Error('No hay conexión a internet');\n  }\n  if (error.name === 'AbortError') {\n    throw new Error('La petición fue cancelada');\n  }\n  if (error instanceof TypeError) {\n    throw new Error('Error de conexión con el servidor');\n  }\n  throw error;\n}\naxiosInstance.checkConnection = async () => {\n  try {\n    const response = await fetch('http://localhost:8090/api/health', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error de conexión:', error);\n    return false;\n  }\n};\nexport default axiosInstance;","map":{"version":3,"names":["axiosInstance","get","url","config","token","localStorage","getItem","headers","response","fetch","method","credentials","handleResponse","error","handleError","post","data","body","JSON","stringify","json","ok","status","removeItem","window","location","href","statusText","console","navigator","onLine","Error","name","TypeError","checkConnection"],"sources":["C:/Users/maylo/OneDrive/Escritorio/novo-front 1/src/services/axios.js"],"sourcesContent":["const axiosInstance = {\r\n  async get(url, config = {}) {\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        ...config.headers\r\n      }\r\n\r\n      const response = await fetch(`http://localhost:8090/api${url}`, {\r\n        method: 'GET',\r\n        headers,\r\n        credentials: 'include'\r\n      })\r\n      return handleResponse(response)\r\n    } catch (error) {\r\n      handleError(error)\r\n    }\r\n  },\r\n\r\n  async post(url, data, config = {}) {\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        ...config.headers\r\n      }\r\n\r\n      const response = await fetch(`http://localhost:8090/api${url}`, {\r\n        method: 'POST',\r\n        headers,\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n      })\r\n      return handleResponse(response)\r\n    } catch (error) {\r\n      handleError(error)\r\n    }\r\n  }\r\n}\r\n\r\nasync function handleResponse(response) {\r\n  try {\r\n    const data = await response.json()\r\n    \r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        localStorage.removeItem('token')\r\n        window.location.href = '/login'\r\n      }\r\n      throw { \r\n        response: { \r\n          data, \r\n          status: response.status,\r\n          statusText: response.statusText \r\n        } \r\n      }\r\n    }\r\n    \r\n    return { data }\r\n  } catch (error) {\r\n    handleError(error)\r\n  }\r\n}\r\n\r\nfunction handleError(error) {\r\n  console.error('Error en la petición:', error)\r\n  if (!navigator.onLine) {\r\n    throw new Error('No hay conexión a internet')\r\n  }\r\n  if (error.name === 'AbortError') {\r\n    throw new Error('La petición fue cancelada')\r\n  }\r\n  if (error instanceof TypeError) {\r\n    throw new Error('Error de conexión con el servidor')\r\n  }\r\n  throw error\r\n}\r\n\r\naxiosInstance.checkConnection = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:8090/api/health', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    return response.ok\r\n  } catch (error) {\r\n    console.error('Error de conexión:', error)\r\n    return false\r\n  }\r\n}\r\n\r\nexport default axiosInstance "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}