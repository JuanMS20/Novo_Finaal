{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nconst API_URL = 'http://localhost:8080';\nexport const authService = {\n  async login(email, password) {\n    try {\n      const response = await fetch(`${API_URL}/api/login.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error en login:', error);\n      throw error;\n    }\n  },\n  async register(username, email, password) {\n    try {\n      const response = await fetch(`${API_URL}/api/register.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error en registro:', error);\n      throw error;\n    }\n  }\n};\nexport const productService = {\n  async getFilteredProducts(filters = {}) {\n    const queryParams = new URLSearchParams();\n    if (filters.categories?.length) {\n      queryParams.append('category', filters.categories.join(','));\n    }\n    if (filters.conditions?.length) {\n      queryParams.append('condition', filters.conditions.join(','));\n    }\n    if (filters.minPrice) {\n      queryParams.append('minPrice', filters.minPrice);\n    }\n    if (filters.maxPrice) {\n      queryParams.append('maxPrice', filters.maxPrice);\n    }\n    const response = await fetch(`${API_URL}/products.php?${queryParams}`);\n    return response.json();\n  },\n  async createProduct(productData) {\n    const response = await fetch(`${API_URL}/products.php`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData)\n    });\n    return response.json();\n  },\n  async updateProduct(productData) {\n    const response = await fetch(`${API_URL}/products.php`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData)\n    });\n    return response.json();\n  },\n  async deleteProduct(id, userId) {\n    const response = await fetch(`${API_URL}/products.php`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        user_id: userId\n      })\n    });\n    return response.json();\n  }\n};\nexport const profileService = {\n  async getProfile(userId) {\n    const response = await fetch(`${API_URL}/profile.php?user_id=${userId}`);\n    return response.json();\n  },\n  async updateProfile(profileData) {\n    const response = await fetch(`${API_URL}/profile.php`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(profileData)\n    });\n    return response.json();\n  }\n};\nexport const uploadService = {\n  async uploadImage(file) {\n    const formData = new FormData();\n    formData.append('image', file);\n    const response = await fetch(`${API_URL}/upload.php`, {\n      method: 'POST',\n      body: formData\n    });\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_URL","authService","login","email","password","response","fetch","method","headers","body","JSON","stringify","json","error","console","register","username","productService","getFilteredProducts","filters","queryParams","URLSearchParams","categories","length","append","join","conditions","minPrice","maxPrice","createProduct","productData","updateProduct","deleteProduct","id","userId","user_id","profileService","getProfile","updateProfile","profileData","uploadService","uploadImage","file","formData","FormData"],"sources":["C:/Users/maylo/OneDrive/Escritorio/novo-front 1/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:8080';\r\n\r\nexport const authService = {\r\n    async login(email, password) {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/login.php`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({ email, password }),\r\n            });\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('Error en login:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async register(username, email, password) {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/register.php`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({ username, email, password }),\r\n            });\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('Error en registro:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport const productService = {\r\n    async getFilteredProducts(filters = {}) {\r\n        const queryParams = new URLSearchParams();\r\n        \r\n        if (filters.categories?.length) {\r\n            queryParams.append('category', filters.categories.join(','));\r\n        }\r\n        if (filters.conditions?.length) {\r\n            queryParams.append('condition', filters.conditions.join(','));\r\n        }\r\n        if (filters.minPrice) {\r\n            queryParams.append('minPrice', filters.minPrice);\r\n        }\r\n        if (filters.maxPrice) {\r\n            queryParams.append('maxPrice', filters.maxPrice);\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/products.php?${queryParams}`);\r\n        return response.json();\r\n    },\r\n\r\n    async createProduct(productData) {\r\n        const response = await fetch(`${API_URL}/products.php`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(productData),\r\n        });\r\n        return response.json();\r\n    },\r\n\r\n    async updateProduct(productData) {\r\n        const response = await fetch(`${API_URL}/products.php`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(productData),\r\n        });\r\n        return response.json();\r\n    },\r\n\r\n    async deleteProduct(id, userId) {\r\n        const response = await fetch(`${API_URL}/products.php`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ id, user_id: userId }),\r\n        });\r\n        return response.json();\r\n    }\r\n};\r\n\r\nexport const profileService = {\r\n    async getProfile(userId) {\r\n        const response = await fetch(`${API_URL}/profile.php?user_id=${userId}`);\r\n        return response.json();\r\n    },\r\n\r\n    async updateProfile(profileData) {\r\n        const response = await fetch(`${API_URL}/profile.php`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(profileData),\r\n        });\r\n        return response.json();\r\n    }\r\n};\r\n\r\nexport const uploadService = {\r\n    async uploadImage(file) {\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n\r\n        const response = await fetch(`${API_URL}/upload.php`, {\r\n            method: 'POST',\r\n            body: formData,\r\n        });\r\n        return response.json();\r\n    }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}