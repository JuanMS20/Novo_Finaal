{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nconst API_URL = 'http://localhost:8080';\n\n// Simulación de base de datos local\nconst getUsers = () => {\n  const users = localStorage.getItem('users');\n  return users ? JSON.parse(users) : [];\n};\nconst saveUsers = users => {\n  localStorage.setItem('users', JSON.stringify(users));\n};\nexport const authService = {\n  async login(email, password) {\n    try {\n      const users = getUsers();\n      const user = users.find(u => u.email === email);\n      if (!user) {\n        throw new Error('Usuario no encontrado');\n      }\n      if (user.password !== password) {\n        throw new Error('Contraseña incorrecta');\n      }\n\n      // No guardamos la contraseña en la sesión\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = user;\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return {\n        user: userWithoutPassword,\n        message: 'Login exitoso'\n      };\n    } catch (error) {\n      console.error('Error en login:', error);\n      throw error;\n    }\n  },\n  async register(username, email, password) {\n    try {\n      const users = getUsers();\n\n      // Verificar si el email ya existe\n      if (users.some(u => u.email === email)) {\n        throw new Error('El email ya está registrado');\n      }\n\n      // Verificar si el username ya existe\n      if (users.some(u => u.username === username)) {\n        throw new Error('El nombre de usuario ya está en uso');\n      }\n\n      // Crear nuevo usuario\n      const newUser = {\n        id: Date.now(),\n        // Usar timestamp como ID\n        username,\n        email,\n        password,\n        created_at: new Date().toISOString()\n      };\n      users.push(newUser);\n      saveUsers(users);\n      return {\n        status: 'success',\n        message: 'Usuario registrado exitosamente',\n        data: {\n          username: newUser.username,\n          email: newUser.email\n        }\n      };\n    } catch (error) {\n      console.error('Error en registro:', error);\n      throw error;\n    }\n  },\n  logout() {\n    localStorage.removeItem('currentUser');\n  },\n  getCurrentUser() {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  },\n  isAuthenticated() {\n    return !!localStorage.getItem('currentUser');\n  }\n};\nexport const productService = {\n  async getFilteredProducts(filters = {}) {\n    try {\n      const queryParams = new URLSearchParams();\n      if (filters.categories?.length) {\n        queryParams.append('category', filters.categories.join(','));\n      }\n      if (filters.conditions?.length) {\n        queryParams.append('condition', filters.conditions.join(','));\n      }\n      if (filters.minPrice) {\n        queryParams.append('minPrice', filters.minPrice);\n      }\n      if (filters.maxPrice) {\n        queryParams.append('maxPrice', filters.maxPrice);\n      }\n      const response = await fetch(`${API_URL}/api/products.php?${queryParams}`);\n      if (!response.ok) {\n        throw new Error('Error al obtener productos');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error al obtener productos:', error);\n      throw error;\n    }\n  },\n  async createProduct(productData) {\n    try {\n      const response = await fetch(`${API_URL}/api/products.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productData)\n      });\n      if (!response.ok) {\n        throw new Error('Error al crear producto');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error al crear producto:', error);\n      throw error;\n    }\n  }\n};\nexport const profileService = {\n  async getProfile(userId) {\n    try {\n      const response = await fetch(`${API_URL}/api/profile.php?user_id=${userId}`);\n      if (!response.ok) {\n        throw new Error('Error al obtener perfil');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error al obtener perfil:', error);\n      throw error;\n    }\n  },\n  async updateProfile(profileData) {\n    try {\n      const response = await fetch(`${API_URL}/api/profile.php`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(profileData)\n      });\n      if (!response.ok) {\n        throw new Error('Error al actualizar perfil');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error al actualizar perfil:', error);\n      throw error;\n    }\n  }\n};\nexport const uploadService = {\n  async uploadImage(file) {\n    const formData = new FormData();\n    formData.append('image', file);\n    const response = await fetch(`${API_URL}/upload.php`, {\n      method: 'POST',\n      body: formData\n    });\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_URL","getUsers","users","localStorage","getItem","JSON","parse","saveUsers","setItem","stringify","authService","login","email","password","user","find","u","Error","_","userWithoutPassword","message","error","console","register","username","some","newUser","id","Date","now","created_at","toISOString","push","status","data","logout","removeItem","getCurrentUser","isAuthenticated","productService","getFilteredProducts","filters","queryParams","URLSearchParams","categories","length","append","join","conditions","minPrice","maxPrice","response","fetch","ok","json","createProduct","productData","method","headers","body","profileService","getProfile","userId","updateProfile","profileData","uploadService","uploadImage","file","formData","FormData"],"sources":["C:/Users/maylo/OneDrive/Escritorio/novo-front 1/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:8080';\r\n\r\n// Simulación de base de datos local\r\nconst getUsers = () => {\r\n    const users = localStorage.getItem('users');\r\n    return users ? JSON.parse(users) : [];\r\n};\r\n\r\nconst saveUsers = (users) => {\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n};\r\n\r\nexport const authService = {\r\n    async login(email, password) {\r\n        try {\r\n            const users = getUsers();\r\n            const user = users.find(u => u.email === email);\r\n            \r\n            if (!user) {\r\n                throw new Error('Usuario no encontrado');\r\n            }\r\n            \r\n            if (user.password !== password) {\r\n                throw new Error('Contraseña incorrecta');\r\n            }\r\n            \r\n            // No guardamos la contraseña en la sesión\r\n            const { password: _, ...userWithoutPassword } = user;\r\n            localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n            \r\n            return {\r\n                user: userWithoutPassword,\r\n                message: 'Login exitoso'\r\n            };\r\n        } catch (error) {\r\n            console.error('Error en login:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async register(username, email, password) {\r\n        try {\r\n            const users = getUsers();\r\n            \r\n            // Verificar si el email ya existe\r\n            if (users.some(u => u.email === email)) {\r\n                throw new Error('El email ya está registrado');\r\n            }\r\n            \r\n            // Verificar si el username ya existe\r\n            if (users.some(u => u.username === username)) {\r\n                throw new Error('El nombre de usuario ya está en uso');\r\n            }\r\n            \r\n            // Crear nuevo usuario\r\n            const newUser = {\r\n                id: Date.now(), // Usar timestamp como ID\r\n                username,\r\n                email,\r\n                password,\r\n                created_at: new Date().toISOString()\r\n            };\r\n            \r\n            users.push(newUser);\r\n            saveUsers(users);\r\n            \r\n            return {\r\n                status: 'success',\r\n                message: 'Usuario registrado exitosamente',\r\n                data: {\r\n                    username: newUser.username,\r\n                    email: newUser.email\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error('Error en registro:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    logout() {\r\n        localStorage.removeItem('currentUser');\r\n    },\r\n\r\n    getCurrentUser() {\r\n        const user = localStorage.getItem('currentUser');\r\n        return user ? JSON.parse(user) : null;\r\n    },\r\n\r\n    isAuthenticated() {\r\n        return !!localStorage.getItem('currentUser');\r\n    }\r\n};\r\n\r\nexport const productService = {\r\n    async getFilteredProducts(filters = {}) {\r\n        try {\r\n            const queryParams = new URLSearchParams();\r\n            \r\n            if (filters.categories?.length) {\r\n                queryParams.append('category', filters.categories.join(','));\r\n            }\r\n            if (filters.conditions?.length) {\r\n                queryParams.append('condition', filters.conditions.join(','));\r\n            }\r\n            if (filters.minPrice) {\r\n                queryParams.append('minPrice', filters.minPrice);\r\n            }\r\n            if (filters.maxPrice) {\r\n                queryParams.append('maxPrice', filters.maxPrice);\r\n            }\r\n\r\n            const response = await fetch(`${API_URL}/api/products.php?${queryParams}`);\r\n            if (!response.ok) {\r\n                throw new Error('Error al obtener productos');\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('Error al obtener productos:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async createProduct(productData) {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/products.php`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(productData),\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Error al crear producto');\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('Error al crear producto:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport const profileService = {\r\n    async getProfile(userId) {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/profile.php?user_id=${userId}`);\r\n            if (!response.ok) {\r\n                throw new Error('Error al obtener perfil');\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('Error al obtener perfil:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    async updateProfile(profileData) {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/profile.php`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(profileData),\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Error al actualizar perfil');\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('Error al actualizar perfil:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport const uploadService = {\r\n    async uploadImage(file) {\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n\r\n        const response = await fetch(`${API_URL}/upload.php`, {\r\n            method: 'POST',\r\n            body: formData,\r\n        });\r\n        return response.json();\r\n    }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}