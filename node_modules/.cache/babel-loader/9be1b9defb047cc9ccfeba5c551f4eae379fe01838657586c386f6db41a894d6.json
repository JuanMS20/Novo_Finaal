{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\nimport { db } from '../main.js';\nimport { getAuth } from \"firebase/auth\"; // Importar autenticación de Firebase\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from \"firebase/storage\"; // Importar Firebase Storage\n\nexport default {\n  __name: 'FeedPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const title = ref(\"\");\n    const description = ref(\"\");\n    const file = ref(null); // Para almacenar el archivo seleccionado\n    const posts = ref([]);\n    const editingPost = ref(null); // Para saber si se está editando un post\n\n    const onFileChange = event => {\n      file.value = event.target.files[0]; // Guardar el archivo seleccionado\n    };\n\n    // Función para enviar los datos\n    const submitData = async () => {\n      const auth = getAuth();\n      const user = auth.currentUser; // Obtener el usuario autenticado\n\n      if (!user) {\n        alert(\"Debes estar autenticado para enviar un post\");\n        return;\n      }\n      try {\n        let imageUrl = \"\";\n        if (file.value) {\n          // Subir la imagen a Firebase Storage\n          const storage = getStorage();\n          const storageReference = storageRef(storage, `images/${file.value.name}`);\n          const snapshot = await uploadBytes(storageReference, file.value);\n          imageUrl = await getDownloadURL(snapshot.ref); // Obtener la URL pública de la imagen\n        }\n        if (editingPost.value) {\n          // Actualizar el post si se está editando\n          const postRef = doc(db, \"posts\", editingPost.value.id);\n          await updateDoc(postRef, {\n            title: title.value,\n            description: description.value,\n            imageUrl: imageUrl || editingPost.value.imageUrl // Mantener la imagen anterior si no se sube una nueva\n          });\n          alert(\"Post actualizado correctamente\");\n        } else {\n          // Añadir nuevo post con el correo del usuario y la imagen\n          await addDoc(collection(db, \"posts\"), {\n            title: title.value,\n            description: description.value,\n            imageUrl: imageUrl,\n            // URL de la imagen\n            createdAt: new Date(),\n            userEmail: user.email // Añadir el correo del usuario autenticado\n          });\n          alert(\"Datos enviados correctamente\");\n        }\n        title.value = \"\"; // Limpiar campos después de enviar\n        description.value = \"\";\n        file.value = null; // Limpiar el archivo seleccionado\n        editingPost.value = null; // Reiniciar la variable de edición\n        fetchPosts(); // Recargar los posts\n      } catch (e) {\n        console.error(\"Error al añadir o actualizar el documento: \", e);\n        alert(\"Hubo un error al enviar los datos\");\n      }\n    };\n\n    // Función para obtener los posts desde Firestore\n    const fetchPosts = async () => {\n      const querySnapshot = await getDocs(collection(db, \"posts\"));\n      posts.value = querySnapshot.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n    };\n\n    // Función para editar un post\n    const editPost = post => {\n      title.value = post.title;\n      description.value = post.description;\n      editingPost.value = post;\n    };\n\n    // Función para eliminar un post\n    const deletePost = async id => {\n      const postRef = doc(db, \"posts\", id);\n      await deleteDoc(postRef);\n      alert(\"Post eliminado correctamente\");\n      fetchPosts(); // Recargar los posts\n    };\n\n    // Cargar los posts cuando el componente se monte\n    onMounted(() => {\n      fetchPosts();\n    });\n    const __returned__ = {\n      title,\n      description,\n      file,\n      posts,\n      editingPost,\n      onFileChange,\n      submitData,\n      fetchPosts,\n      editPost,\n      deletePost,\n      ref,\n      onMounted,\n      get collection() {\n        return collection;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get getDocs() {\n        return getDocs;\n      },\n      get doc() {\n        return doc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get deleteDoc() {\n        return deleteDoc;\n      },\n      get db() {\n        return db;\n      },\n      get getAuth() {\n        return getAuth;\n      },\n      get getStorage() {\n        return getStorage;\n      },\n      get storageRef() {\n        return storageRef;\n      },\n      get uploadBytes() {\n        return uploadBytes;\n      },\n      get getDownloadURL() {\n        return getDownloadURL;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","collection","addDoc","getDocs","doc","updateDoc","deleteDoc","db","getAuth","getStorage","storageRef","uploadBytes","getDownloadURL","title","description","file","posts","editingPost","onFileChange","event","value","target","files","submitData","auth","user","currentUser","alert","imageUrl","storage","storageReference","name","snapshot","postRef","id","createdAt","Date","userEmail","email","fetchPosts","e","console","error","querySnapshot","docs","map","data","editPost","post","deletePost"],"sources":["C:/Users/jorda/authfire/src/views/FeedPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Formulario Feed</h1>\r\n    <form @submit.prevent=\"submitData\">\r\n      <input v-model=\"title\" type=\"text\" placeholder=\"Título\" />\r\n      <input v-model=\"description\" type=\"text\" placeholder=\"Descripción\" />\r\n      <input type=\"file\" @change=\"onFileChange\" /> <!-- Campo para seleccionar imagen -->\r\n      <button type=\"submit\">Enviar</button>\r\n    </form>\r\n\r\n    <!-- Mostrar lista de posts -->\r\n    <div v-if=\"posts.length > 0\">\r\n      <h2>Posts</h2>\r\n      <ul>\r\n        <li v-for=\"post in posts\" :key=\"post.id\">\r\n          <h3>{{ post.title }}</h3>\r\n          <p>{{ post.description }}</p>\r\n          <p><strong>Creado por:</strong> {{ post.userEmail }}</p>\r\n          <img v-if=\"post.imageUrl\" :src=\"post.imageUrl\" alt=\"Imagen del post\" width=\"100\" /> <!-- Mostrar imagen si existe -->\r\n          <button @click=\"editPost(post)\">Editar</button>\r\n          <button @click=\"deletePost(post.id)\">Eliminar</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\r\nimport { db } from '../main.js';\r\nimport { getAuth } from \"firebase/auth\";  // Importar autenticación de Firebase\r\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from \"firebase/storage\";  // Importar Firebase Storage\r\n\r\nconst title = ref(\"\");\r\nconst description = ref(\"\");\r\nconst file = ref(null);  // Para almacenar el archivo seleccionado\r\nconst posts = ref([]);\r\nconst editingPost = ref(null);  // Para saber si se está editando un post\r\n\r\nconst onFileChange = (event) => {\r\n  file.value = event.target.files[0];  // Guardar el archivo seleccionado\r\n};\r\n\r\n// Función para enviar los datos\r\nconst submitData = async () => {\r\n  const auth = getAuth();\r\n  const user = auth.currentUser;  // Obtener el usuario autenticado\r\n\r\n  if (!user) {\r\n    alert(\"Debes estar autenticado para enviar un post\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    let imageUrl = \"\";\r\n\r\n    if (file.value) {\r\n      // Subir la imagen a Firebase Storage\r\n      const storage = getStorage();\r\n      const storageReference = storageRef(storage, `images/${file.value.name}`);\r\n      const snapshot = await uploadBytes(storageReference, file.value);\r\n      imageUrl = await getDownloadURL(snapshot.ref);  // Obtener la URL pública de la imagen\r\n    }\r\n\r\n    if (editingPost.value) {\r\n      // Actualizar el post si se está editando\r\n      const postRef = doc(db, \"posts\", editingPost.value.id);\r\n      await updateDoc(postRef, {\r\n        title: title.value,\r\n        description: description.value,\r\n        imageUrl: imageUrl || editingPost.value.imageUrl  // Mantener la imagen anterior si no se sube una nueva\r\n      });\r\n      alert(\"Post actualizado correctamente\");\r\n    } else {\r\n      // Añadir nuevo post con el correo del usuario y la imagen\r\n      await addDoc(collection(db, \"posts\"), {\r\n        title: title.value,\r\n        description: description.value,\r\n        imageUrl: imageUrl,  // URL de la imagen\r\n        createdAt: new Date(),\r\n        userEmail: user.email  // Añadir el correo del usuario autenticado\r\n      });\r\n      alert(\"Datos enviados correctamente\");\r\n    }\r\n\r\n    title.value = \"\";  // Limpiar campos después de enviar\r\n    description.value = \"\";\r\n    file.value = null;  // Limpiar el archivo seleccionado\r\n    editingPost.value = null;  // Reiniciar la variable de edición\r\n    fetchPosts();  // Recargar los posts\r\n  } catch (e) {\r\n    console.error(\"Error al añadir o actualizar el documento: \", e);\r\n    alert(\"Hubo un error al enviar los datos\");\r\n  }\r\n};\r\n\r\n// Función para obtener los posts desde Firestore\r\nconst fetchPosts = async () => {\r\n  const querySnapshot = await getDocs(collection(db, \"posts\"));\r\n  posts.value = querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));\r\n};\r\n\r\n// Función para editar un post\r\nconst editPost = (post) => {\r\n  title.value = post.title;\r\n  description.value = post.description;\r\n  editingPost.value = post;\r\n};\r\n\r\n// Función para eliminar un post\r\nconst deletePost = async (id) => {\r\n  const postRef = doc(db, \"posts\", id);\r\n  await deleteDoc(postRef);\r\n  alert(\"Post eliminado correctamente\");\r\n  fetchPosts();  // Recargar los posts\r\n};\r\n\r\n// Cargar los posts cuando el componente se monte\r\nonMounted(() => {\r\n  fetchPosts();\r\n});\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}