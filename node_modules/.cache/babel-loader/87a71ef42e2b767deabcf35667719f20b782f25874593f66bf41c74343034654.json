{"ast":null,"code":"/* eslint-disable no-unused-vars */\n// Deshabilitamos temporalmente las advertencias de ESLint mientras desarrollamos\n\nexport const authService = {\n  async login(email, password) {\n    // Simulamos una llamada al backend\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // En un caso real, aquí validaríamos con el backend\n        const mockUser = {\n          id: 1,\n          email: email,\n          name: \"Usuario Demo\"\n        };\n        localStorage.setItem('user', JSON.stringify(mockUser));\n        resolve(mockUser);\n      }, 1000);\n    });\n  },\n  async register(email, password) {\n    // Simulamos una llamada al backend\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // En un caso real, aquí registraríamos en el backend\n        const mockUser = {\n          id: 1,\n          email: email,\n          name: \"Usuario Demo\"\n        };\n        localStorage.setItem('user', JSON.stringify(mockUser));\n        resolve(mockUser);\n      }, 1000);\n    });\n  },\n  logout() {\n    localStorage.removeItem('user');\n  },\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  isAuthenticated() {\n    return !!this.getCurrentUser();\n  }\n};","map":{"version":3,"names":["authService","login","email","password","Promise","resolve","setTimeout","mockUser","id","name","localStorage","setItem","JSON","stringify","register","logout","removeItem","getCurrentUser","userStr","getItem","parse","isAuthenticated"],"sources":["C:/Users/maylo/OneDrive/Escritorio/novo-front 1/src/services/authService.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\n// Deshabilitamos temporalmente las advertencias de ESLint mientras desarrollamos\r\n\r\nexport const authService = {\r\n  async login(email, password) {\r\n    // Simulamos una llamada al backend\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // En un caso real, aquí validaríamos con el backend\r\n        const mockUser = {\r\n          id: 1,\r\n          email: email,\r\n          name: \"Usuario Demo\"\r\n        }\r\n        localStorage.setItem('user', JSON.stringify(mockUser))\r\n        resolve(mockUser)\r\n      }, 1000)\r\n    })\r\n  },\r\n\r\n  async register(email, password) {\r\n    // Simulamos una llamada al backend\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // En un caso real, aquí registraríamos en el backend\r\n        const mockUser = {\r\n          id: 1,\r\n          email: email,\r\n          name: \"Usuario Demo\"\r\n        }\r\n        localStorage.setItem('user', JSON.stringify(mockUser))\r\n        resolve(mockUser)\r\n      }, 1000)\r\n    })\r\n  },\r\n\r\n  logout() {\r\n    localStorage.removeItem('user')\r\n  },\r\n\r\n  getCurrentUser() {\r\n    const userStr = localStorage.getItem('user')\r\n    return userStr ? JSON.parse(userStr) : null\r\n  },\r\n\r\n  isAuthenticated() {\r\n    return !!this.getCurrentUser()\r\n  }\r\n} "],"mappings":"AAAA;AACA;;AAEA,OAAO,MAAMA,WAAW,GAAG;EACzB,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B;IACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACf;QACA,MAAMC,QAAQ,GAAG;UACfC,EAAE,EAAE,CAAC;UACLN,KAAK,EAAEA,KAAK;UACZO,IAAI,EAAE;QACR,CAAC;QACDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,CAAC;QACtDF,OAAO,CAACE,QAAQ,CAAC;MACnB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EAED,MAAMO,QAAQA,CAACZ,KAAK,EAAEC,QAAQ,EAAE;IAC9B;IACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACf;QACA,MAAMC,QAAQ,GAAG;UACfC,EAAE,EAAE,CAAC;UACLN,KAAK,EAAEA,KAAK;UACZO,IAAI,EAAE;QACR,CAAC;QACDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,CAAC;QACtDF,OAAO,CAACE,QAAQ,CAAC;MACnB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EAEDQ,MAAMA,CAAA,EAAG;IACPL,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAcA,CAAA,EAAG;IACf,MAAMC,OAAO,GAAGR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC;IAC5C,OAAOD,OAAO,GAAGN,IAAI,CAACQ,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;EAC7C,CAAC;EAEDG,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAAC,IAAI,CAACJ,cAAc,CAAC,CAAC;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}