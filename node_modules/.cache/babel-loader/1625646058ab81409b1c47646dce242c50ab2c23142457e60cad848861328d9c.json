{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"h1\", null, \"Formulario Feed\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _withModifiers($setup.submitData, [\"prevent\"])\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.title = $event),\n    type: \"text\",\n    placeholder: \"Título\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.title]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.description = $event),\n    type: \"text\",\n    placeholder: \"Descripción\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.description]]), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: $setup.onFileChange\n  }, null, 32 /* NEED_HYDRATION */), _createCommentVNode(\" Campo para seleccionar imagen \"), _cache[2] || (_cache[2] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Enviar\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), _createCommentVNode(\" Mostrar lista de posts \"), $setup.posts.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", null, \"Posts\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.posts, post => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: post.id\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(post.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(post.description), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Creado por:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(post.userEmail), 1 /* TEXT */)]), post.imageUrl ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: post.imageUrl,\n      alt: \"Imagen del post\",\n      width: \"100\"\n    }, null, 8 /* PROPS */, _hoisted_2)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Mostrar imagen si existe \"), _createElementVNode(\"button\", {\n      onClick: $event => $setup.editPost(post)\n    }, \"Editar\", 8 /* PROPS */, _hoisted_3), _createElementVNode(\"button\", {\n      onClick: $event => $setup.deletePost(post.id)\n    }, \"Eliminar\", 8 /* PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","onSubmit","_withModifiers","$setup","submitData","_cache","$event","title","type","placeholder","description","onChange","onFileChange","_createCommentVNode","posts","length","_hoisted_1","_Fragment","_renderList","post","id","_toDisplayString","_createTextVNode","userEmail","imageUrl","src","alt","width","_hoisted_2","onClick","editPost","_hoisted_3","deletePost","_hoisted_4"],"sources":["C:\\Users\\jorda\\OneDrive\\Escritorio\\novo-front\\src\\views\\FeedPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Formulario Feed</h1>\r\n    <form @submit.prevent=\"submitData\">\r\n      <input v-model=\"title\" type=\"text\" placeholder=\"Título\" />\r\n      <input v-model=\"description\" type=\"text\" placeholder=\"Descripción\" />\r\n      <input type=\"file\" @change=\"onFileChange\" /> <!-- Campo para seleccionar imagen -->\r\n      <button type=\"submit\">Enviar</button>\r\n    </form>\r\n\r\n    <!-- Mostrar lista de posts -->\r\n    <div v-if=\"posts.length > 0\">\r\n      <h2>Posts</h2>\r\n      <ul>\r\n        <li v-for=\"post in posts\" :key=\"post.id\">\r\n          <h3>{{ post.title }}</h3>\r\n          <p>{{ post.description }}</p>\r\n          <p><strong>Creado por:</strong> {{ post.userEmail }}</p>\r\n          <img v-if=\"post.imageUrl\" :src=\"post.imageUrl\" alt=\"Imagen del post\" width=\"100\" /> <!-- Mostrar imagen si existe -->\r\n          <button @click=\"editPost(post)\">Editar</button>\r\n          <button @click=\"deletePost(post.id)\">Eliminar</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\r\nimport { db } from '../main.js';\r\nimport { getAuth } from \"firebase/auth\";  // Importar autenticación de Firebase\r\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from \"firebase/storage\";  // Importar Firebase Storage\r\n\r\nconst title = ref(\"\");\r\nconst description = ref(\"\");\r\nconst file = ref(null);  // Para almacenar el archivo seleccionado\r\nconst posts = ref([]);\r\nconst editingPost = ref(null);  // Para saber si se está editando un post\r\n\r\nconst onFileChange = (event) => {\r\n  file.value = event.target.files[0];  // Guardar el archivo seleccionado\r\n};\r\n\r\n// Función para enviar los datos\r\nconst submitData = async () => {\r\n  const auth = getAuth();\r\n  const user = auth.currentUser;  // Obtener el usuario autenticado\r\n\r\n  if (!user) {\r\n    alert(\"Debes estar autenticado para enviar un post\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    let imageUrl = \"\";\r\n\r\n    if (file.value) {\r\n      // Subir la imagen a Firebase Storage\r\n      const storage = getStorage();\r\n      const storageReference = storageRef(storage, `images/${file.value.name}`);\r\n      const snapshot = await uploadBytes(storageReference, file.value);\r\n      imageUrl = await getDownloadURL(snapshot.ref);  // Obtener la URL pública de la imagen\r\n    }\r\n\r\n    if (editingPost.value) {\r\n      // Actualizar el post si se está editando\r\n      const postRef = doc(db, \"posts\", editingPost.value.id);\r\n      await updateDoc(postRef, {\r\n        title: title.value,\r\n        description: description.value,\r\n        imageUrl: imageUrl || editingPost.value.imageUrl  // Mantener la imagen anterior si no se sube una nueva\r\n      });\r\n      alert(\"Post actualizado correctamente\");\r\n    } else {\r\n      // Añadir nuevo post con el correo del usuario y la imagen\r\n      await addDoc(collection(db, \"posts\"), {\r\n        title: title.value,\r\n        description: description.value,\r\n        imageUrl: imageUrl,  // URL de la imagen\r\n        createdAt: new Date(),\r\n        userEmail: user.email  // Añadir el correo del usuario autenticado\r\n      });\r\n      alert(\"Datos enviados correctamente\");\r\n    }\r\n\r\n    title.value = \"\";  // Limpiar campos después de enviar\r\n    description.value = \"\";\r\n    file.value = null;  // Limpiar el archivo seleccionado\r\n    editingPost.value = null;  // Reiniciar la variable de edición\r\n    fetchPosts();  // Recargar los posts\r\n  } catch (e) {\r\n    console.error(\"Error al añadir o actualizar el documento: \", e);\r\n    alert(\"Hubo un error al enviar los datos\");\r\n  }\r\n};\r\n\r\n// Función para obtener los posts desde Firestore\r\nconst fetchPosts = async () => {\r\n  const querySnapshot = await getDocs(collection(db, \"posts\"));\r\n  posts.value = querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));\r\n};\r\n\r\n// Función para editar un post\r\nconst editPost = (post) => {\r\n  title.value = post.title;\r\n  description.value = post.description;\r\n  editingPost.value = post;\r\n};\r\n\r\n// Función para eliminar un post\r\nconst deletePost = async (id) => {\r\n  const postRef = doc(db, \"posts\", id);\r\n  await deleteDoc(postRef);\r\n  alert(\"Post eliminado correctamente\");\r\n  fetchPosts();  // Recargar los posts\r\n};\r\n\r\n// Cargar los posts cuando el componente se monte\r\nonMounted(() => {\r\n  fetchPosts();\r\n});\r\n</script>\r\n"],"mappings":";;EAAAA,GAAA;AAAA;mBAAA;mBAAA;mBAAA;;uBACEC,mBAAA,CAuBM,c,0BAtBJC,mBAAA,CAAwB,YAApB,iBAAe,sBACnBA,mBAAA,CAKO;IALAC,QAAM,EAHjBC,cAAA,CAG2BC,MAAA,CAAAC,UAAU;sBAC/BJ,mBAAA,CAA0D;IAJhE,uBAAAK,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAIsBH,MAAA,CAAAI,KAAK,GAAAD,MAAA;IAAEE,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC;iDAA/BN,MAAA,CAAAI,KAAK,E,mBACrBP,mBAAA,CAAqE;IAL3E,uBAAAK,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAKsBH,MAAA,CAAAO,WAAW,GAAAJ,MAAA;IAAEE,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC;iDAArCN,MAAA,CAAAO,WAAW,E,GAC3BV,mBAAA,CAA4C;IAArCQ,IAAI,EAAC,MAAM;IAAEG,QAAM,EAAER,MAAA,CAAAS;qCAAiBC,mBAAA,mCAAsC,E,0BACnFb,mBAAA,CAAqC;IAA7BQ,IAAI,EAAC;EAAQ,GAAC,QAAM,qB,4BAG9BK,mBAAA,4BAA+B,EACpBV,MAAA,CAAAW,KAAK,CAACC,MAAM,Q,cAAvBhB,mBAAA,CAYM,OAvBViB,UAAA,G,0BAYMhB,mBAAA,CAAc,YAAV,OAAK,sBACTA,mBAAA,CASK,c,kBARHD,mBAAA,CAOKkB,SAAA,QArBbC,WAAA,CAc2Bf,MAAA,CAAAW,KAAK,EAAbK,IAAI;yBAAfpB,mBAAA,CAOK;MAPsBD,GAAG,EAAEqB,IAAI,CAACC;QACnCpB,mBAAA,CAAyB,YAAAqB,gBAAA,CAAlBF,IAAI,CAACZ,KAAK,kBACjBP,mBAAA,CAA6B,WAAAqB,gBAAA,CAAvBF,IAAI,CAACT,WAAW,kBACtBV,mBAAA,CAAwD,Y,0BAArDA,mBAAA,CAA4B,gBAApB,aAAW,sBAjBhCsB,gBAAA,CAiByC,GAAC,GAAAD,gBAAA,CAAGF,IAAI,CAACI,SAAS,iB,GACtCJ,IAAI,CAACK,QAAQ,I,cAAxBzB,mBAAA,CAAmF;MAlB7FD,GAAA;MAkBqC2B,GAAG,EAAEN,IAAI,CAACK,QAAQ;MAAEE,GAAG,EAAC,iBAAiB;MAACC,KAAK,EAAC;4BAlBrFC,UAAA,KAAAf,mBAAA,gBAkB8FA,mBAAA,8BAAiC,EACrHb,mBAAA,CAA+C;MAAtC6B,OAAK,EAAAvB,MAAA,IAAEH,MAAA,CAAA2B,QAAQ,CAACX,IAAI;OAAG,QAAM,iBAnBhDY,UAAA,GAoBU/B,mBAAA,CAAsD;MAA7C6B,OAAK,EAAAvB,MAAA,IAAEH,MAAA,CAAA6B,UAAU,CAACb,IAAI,CAACC,EAAE;OAAG,UAAQ,iBApBvDa,UAAA,E;wCAAApB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}