{"ast":null,"code":"import { createStore } from 'vuex';\nimport { productService } from '@/services/api';\nimport { authService } from '@/services/authService';\nexport default createStore({\n  state: {\n    user: authService.getCurrentUser(),\n    isAuthenticated: authService.isAuthenticated(),\n    products: [],\n    loading: false,\n    error: null\n  },\n  mutations: {\n    setUser(state, user) {\n      state.user = user;\n      state.isAuthenticated = !!user;\n    },\n    setProducts(state, products) {\n      state.products = products;\n    },\n    setLoading(state, status) {\n      state.loading = status;\n    },\n    setError(state, error) {\n      state.error = error;\n    }\n  },\n  actions: {\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const user = await authService.login(credentials.email, credentials.password);\n        commit('setUser', user);\n        return true;\n      } catch (error) {\n        commit('setError', 'Error en el inicio de sesión');\n        throw error;\n      }\n    },\n    async register({\n      commit\n    }, userData) {\n      try {\n        const user = await authService.register(userData.email, userData.password);\n        commit('setUser', user);\n        return true;\n      } catch (error) {\n        commit('setError', 'Error en el registro');\n        throw error;\n      }\n    },\n    logout({\n      commit\n    }) {\n      authService.logout();\n      commit('setUser', null);\n    },\n    async fetchProducts({\n      commit\n    }, filters = {}) {\n      try {\n        commit('setLoading', true);\n        const products = await productService.getProducts(filters);\n        commit('setProducts', products);\n      } catch (error) {\n        commit('setError', 'Error al cargar los productos');\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    async searchProducts({\n      commit\n    }, query) {\n      try {\n        commit('setLoading', true);\n        const products = await productService.searchProducts(query);\n        commit('setProducts', products);\n      } catch (error) {\n        commit('setError', 'Error al buscar productos');\n      } finally {\n        commit('setLoading', false);\n      }\n    }\n  },\n  getters: {\n    isAuthenticated: state => state.isAuthenticated,\n    currentUser: state => state.user,\n    allProducts: state => state.products,\n    isLoading: state => state.loading,\n    error: state => state.error\n  }\n});","map":{"version":3,"names":["createStore","productService","authService","state","user","getCurrentUser","isAuthenticated","products","loading","error","mutations","setUser","setProducts","setLoading","status","setError","actions","login","commit","credentials","email","password","register","userData","logout","fetchProducts","filters","getProducts","searchProducts","query","getters","currentUser","allProducts","isLoading"],"sources":["C:/Users/maylo/OneDrive/Escritorio/novo-front 1/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport { productService } from '@/services/api'\r\nimport { authService } from '@/services/authService'\r\n\r\nexport default createStore({\r\n  state: {\r\n    user: authService.getCurrentUser(),\r\n    isAuthenticated: authService.isAuthenticated(),\r\n    products: [],\r\n    loading: false,\r\n    error: null\r\n  },\r\n  mutations: {\r\n    setUser(state, user) {\r\n      state.user = user\r\n      state.isAuthenticated = !!user\r\n    },\r\n    setProducts(state, products) {\r\n      state.products = products\r\n    },\r\n    setLoading(state, status) {\r\n      state.loading = status\r\n    },\r\n    setError(state, error) {\r\n      state.error = error\r\n    }\r\n  },\r\n  actions: {\r\n    async login({ commit }, credentials) {\r\n      try {\r\n        const user = await authService.login(credentials.email, credentials.password)\r\n        commit('setUser', user)\r\n        return true\r\n      } catch (error) {\r\n        commit('setError', 'Error en el inicio de sesión')\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async register({ commit }, userData) {\r\n      try {\r\n        const user = await authService.register(userData.email, userData.password)\r\n        commit('setUser', user)\r\n        return true\r\n      } catch (error) {\r\n        commit('setError', 'Error en el registro')\r\n        throw error\r\n      }\r\n    },\r\n\r\n    logout({ commit }) {\r\n      authService.logout()\r\n      commit('setUser', null)\r\n    },\r\n\r\n    async fetchProducts({ commit }, filters = {}) {\r\n      try {\r\n        commit('setLoading', true)\r\n        const products = await productService.getProducts(filters)\r\n        commit('setProducts', products)\r\n      } catch (error) {\r\n        commit('setError', 'Error al cargar los productos')\r\n      } finally {\r\n        commit('setLoading', false)\r\n      }\r\n    },\r\n\r\n    async searchProducts({ commit }, query) {\r\n      try {\r\n        commit('setLoading', true)\r\n        const products = await productService.searchProducts(query)\r\n        commit('setProducts', products)\r\n      } catch (error) {\r\n        commit('setError', 'Error al buscar productos')\r\n      } finally {\r\n        commit('setLoading', false)\r\n      }\r\n    }\r\n  },\r\n  getters: {\r\n    isAuthenticated: state => state.isAuthenticated,\r\n    currentUser: state => state.user,\r\n    allProducts: state => state.products,\r\n    isLoading: state => state.loading,\r\n    error: state => state.error\r\n  }\r\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}