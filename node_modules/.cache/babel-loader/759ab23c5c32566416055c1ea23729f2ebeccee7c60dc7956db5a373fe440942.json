{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\n/**\n * @license lucide-vue-next v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport { h } from 'vue';\nimport defaultAttributes from './defaultAttributes.js';\nconst toKebabCase = string => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst createLucideIcon = (iconName, iconNode) => ({\n  size,\n  strokeWidth = 2,\n  absoluteStrokeWidth,\n  color,\n  class: classes,\n  ...props\n}, {\n  attrs,\n  slots\n}) => {\n  return h(\"svg\", {\n    ...defaultAttributes,\n    width: size || defaultAttributes.width,\n    height: size || defaultAttributes.height,\n    stroke: color || defaultAttributes.stroke,\n    \"stroke-width\": absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n    ...attrs,\n    class: [\"lucide\", `lucide-${toKebabCase(iconName)}`],\n    ...props\n  }, [...iconNode.map(child => h(...child)), ...(slots.default ? [slots.default()] : [])]);\n};\nexport { createLucideIcon as default, toKebabCase };","map":{"version":3,"names":["toKebabCase","string","replace","toLowerCase","createLucideIcon","iconName","iconNode","size","strokeWidth","absoluteStrokeWidth","color","class","classes","props","attrs","slots","h","defaultAttributes","width","height","stroke","Number","map","child","default"],"sources":["../../src/createLucideIcon.ts"],"sourcesContent":["import { h } from 'vue';\nimport type { SVGAttributes, FunctionalComponent } from 'vue';\nimport defaultAttributes from './defaultAttributes';\n\n// Create interface extending SVGAttributes\nexport interface SVGProps extends Partial<SVGAttributes> {\n  size?: 24 | number\n  strokeWidth?: number | string\n  absoluteStrokeWidth?: boolean\n}\n\n\ntype IconNode = [elementName: string, attrs: Record<string, string>][]\n\n/**\n * Converts string to KebabCase\n * Copied from scripts/helper. If anyone knows how to properly import it here\n * then please fix it.\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) => string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\nconst createLucideIcon = (iconName: string, iconNode: IconNode): FunctionalComponent<SVGProps> => (\n  { size, strokeWidth = 2, absoluteStrokeWidth, color, class: classes, ...props }, // props\n  { attrs, slots } // context\n  ) => {\n  return h(\n    'svg',\n    {\n      ...defaultAttributes,\n      width: size || defaultAttributes.width,\n      height: size || defaultAttributes.height,\n      stroke: color || defaultAttributes.stroke,\n      'stroke-width': absoluteStrokeWidth ?  Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n      ...attrs,\n      class: ['lucide', `lucide-${toKebabCase(iconName)}`],\n      ...props,\n    },\n    [\n      ...iconNode.map(child => h(...child)),\n      ...(slots.default ? [slots.default()] : [])\n    ],\n  );\n};\n\nexport default createLucideIcon;\n"],"mappings":";;;;;;;;;;AAsBa,MAAAA,WAAA,GAAeC,MAAmB,IAAAA,MAAA,CAAOC,OAAA,CAAQ,oBAAsB,SAAO,EAAEC,WAAY;AAEzG,MAAMC,gBAAA,GAAmBA,CAACC,QAAA,EAAkBC,QAAA,KAAsD,CAChG;EAAEC,IAAA;EAAMC,WAAc;EAAGC,mBAAqB;EAAAC,KAAA;EAAOC,KAAA,EAAOC,OAAY;EAAA,GAAAC;AAAA,GACxE;EAAEC,KAAA;EAAOC;AAAA,CACJ;EACE,OAAAC,CAAA,CACL,OACA;IACE,GAAGC,iBAAA;IACHC,KAAA,EAAOX,IAAA,IAAQU,iBAAkB,CAAAC,KAAA;IACjCC,MAAA,EAAQZ,IAAA,IAAQU,iBAAkB,CAAAE,MAAA;IAClCC,MAAA,EAAQV,KAAA,IAASO,iBAAkB,CAAAG,MAAA;IACnC,gBAAgBX,mBAAA,GAAuBY,MAAO,CAAAb,WAAW,IAAI,EAAK,GAAAa,MAAA,CAAOd,IAAI,CAAI,GAAAC,WAAA;IACjF,GAAGM,KAAA;IACHH,KAAA,EAAO,CAAC,UAAU,UAAUX,WAAA,CAAYK,QAAQ,CAAG;IACnD,GAAGQ;EACL,GACA,CACE,GAAGP,QAAS,CAAAgB,GAAA,CAAIC,KAAA,IAASP,CAAE,IAAGO,KAAK,CAAC,GACpC,IAAIR,KAAA,CAAMS,OAAU,IAACT,KAAA,CAAMS,OAAQ,EAAC,IAAI,EAAC,EAC3C,CACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}