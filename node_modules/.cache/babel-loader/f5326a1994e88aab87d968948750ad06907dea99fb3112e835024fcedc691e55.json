{"ast":null,"code":"const BASE_URL = 'http://localhost:8090/api';\nconst axiosInstance = {\n  async checkConnection() {\n    try {\n      console.log('Verificando conexión con el servidor...');\n      const response = await fetch(`${BASE_URL}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const isConnected = response.ok;\n      console.log('Conexión con el servidor:', isConnected ? 'OK' : 'Fallida');\n      return isConnected;\n    } catch (error) {\n      console.error('Error de conexión:', error);\n      return false;\n    }\n  },\n  async post(url, data, config = {}) {\n    try {\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...(token && {\n          'Authorization': `Bearer ${token}`\n        }),\n        ...config.headers\n      };\n      console.log('Enviando petición POST a:', `${BASE_URL}${url}`);\n      console.log('Datos:', data);\n      console.log('Headers:', headers);\n      const response = await fetch(`${BASE_URL}${url}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(data),\n        credentials: 'include'\n      });\n      const responseData = await response.json();\n      console.log('Respuesta del servidor:', responseData);\n      if (!response.ok) {\n        throw {\n          response: {\n            data: responseData,\n            status: response.status,\n            statusText: response.statusText\n          }\n        };\n      }\n      return responseData;\n    } catch (error) {\n      console.error('Error en la petición:', error);\n      if (!error.response) {\n        throw new Error('Error de conexión con el servidor');\n      }\n      throw error.response.data;\n    }\n  }\n};\nexport default axiosInstance;","map":{"version":3,"names":["BASE_URL","axiosInstance","checkConnection","console","log","response","fetch","method","headers","isConnected","ok","error","post","url","data","config","token","localStorage","getItem","body","JSON","stringify","credentials","responseData","json","status","statusText","Error"],"sources":["C:/Users/maylo/OneDrive/Escritorio/novo-front 1/src/services/axios.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8090/api'\r\n\r\nconst axiosInstance = {\r\n  async checkConnection() {\r\n    try {\r\n      console.log('Verificando conexión con el servidor...')\r\n      const response = await fetch(`${BASE_URL}/health`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      const isConnected = response.ok\r\n      console.log('Conexión con el servidor:', isConnected ? 'OK' : 'Fallida')\r\n      return isConnected\r\n    } catch (error) {\r\n      console.error('Error de conexión:', error)\r\n      return false\r\n    }\r\n  },\r\n\r\n  async post(url, data, config = {}) {\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        ...config.headers\r\n      }\r\n\r\n      console.log('Enviando petición POST a:', `${BASE_URL}${url}`)\r\n      console.log('Datos:', data)\r\n      console.log('Headers:', headers)\r\n\r\n      const response = await fetch(`${BASE_URL}${url}`, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(data),\r\n        credentials: 'include'\r\n      })\r\n\r\n      const responseData = await response.json()\r\n      console.log('Respuesta del servidor:', responseData)\r\n      \r\n      if (!response.ok) {\r\n        throw {\r\n          response: {\r\n            data: responseData,\r\n            status: response.status,\r\n            statusText: response.statusText\r\n          }\r\n        }\r\n      }\r\n\r\n      return responseData\r\n    } catch (error) {\r\n      console.error('Error en la petición:', error)\r\n      if (!error.response) {\r\n        throw new Error('Error de conexión con el servidor')\r\n      }\r\n      throw error.response.data\r\n    }\r\n  }\r\n}\r\n\r\nexport default axiosInstance "],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;AAE5C,MAAMC,aAAa,GAAG;EACpB,MAAMC,eAAeA,CAAA,EAAG;IACtB,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,SAAS,EAAE;QACjDO,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,WAAW,GAAGJ,QAAQ,CAACK,EAAE;MAC/BP,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEK,WAAW,GAAG,IAAI,GAAG,SAAS,CAAC;MACxE,OAAOA,WAAW;IACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMC,IAAIA,CAACC,GAAG,EAAEC,IAAI,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IACjC,IAAI;MACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMV,OAAO,GAAG;QACd,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE,kBAAkB;QAC5B,IAAIQ,KAAK,IAAI;UAAE,eAAe,EAAE,UAAUA,KAAK;QAAG,CAAC,CAAC;QACpD,GAAGD,MAAM,CAACP;MACZ,CAAC;MAEDL,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE,GAAGJ,QAAQ,GAAGa,GAAG,EAAE,CAAC;MAC7DV,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEU,IAAI,CAAC;MAC3BX,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEI,OAAO,CAAC;MAEhC,MAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,GAAGa,GAAG,EAAE,EAAE;QAChDN,MAAM,EAAE,MAAM;QACdC,OAAO;QACPW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;QAC1BQ,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,MAAMC,YAAY,GAAG,MAAMlB,QAAQ,CAACmB,IAAI,CAAC,CAAC;MAC1CrB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEmB,YAAY,CAAC;MAEpD,IAAI,CAAClB,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM;UACJL,QAAQ,EAAE;YACRS,IAAI,EAAES,YAAY;YAClBE,MAAM,EAAEpB,QAAQ,CAACoB,MAAM;YACvBC,UAAU,EAAErB,QAAQ,CAACqB;UACvB;QACF,CAAC;MACH;MAEA,OAAOH,YAAY;IACrB,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,IAAI,CAACA,KAAK,CAACN,QAAQ,EAAE;QACnB,MAAM,IAAIsB,KAAK,CAAC,mCAAmC,CAAC;MACtD;MACA,MAAMhB,KAAK,CAACN,QAAQ,CAACS,IAAI;IAC3B;EACF;AACF,CAAC;AAED,eAAeb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}